---

- name: stop and disable auditd
  service: name=auditd enabled=no state=stopped

- name: start and enable systemd-timesyncd
  service: name=systemd-timesyncd enabled=yes state=started

- name: install smart
  pacman: name=smartmontools state=present

# override smartd.service with ConditionVirtualization=no
# this should appear in the next upstream release, see https://github.com/smartmontools/smartmontools/issues/62
- name: create drop-in directory for smartd.service
  file: path=/etc/systemd/system/smartd.service.d state=directory owner=root group=root mode=0755

- name: install drop-in snippet for smartd.service
  copy: src=smartd-override.conf dest=/etc/systemd/system/smartd.service.d/override.conf owner=root group=root mode=0644

- name: start and enable smart
  service: name=smartd enabled=yes state=started daemon_reload=yes

- name: start and enable btrfs scrub timer
  service: name=btrfs-scrub@{{ '-' if (item.mount | length == 1) else (item.mount.split("/", 1)[1] | replace("/", "-")) }}.timer enabled=yes state=started
  loop: "{{ ansible_mounts }}"
  when: "item.fstype == 'btrfs' and item.mount != '/var/lib/docker/btrfs' and 'backup' not in item.mount"

- name: install mlocate
  pacman: name=mlocate state=present

- name: activate regular updatedb for mlocate
  service: name=updatedb.timer enabled=yes state=started

- name: generate locales
  locale_gen: name={{ item }} state=present
  with_items:
    - en_US.UTF-8

- name: configure locales
  template: src=locale.conf.j2 dest=/etc/locale.conf owner=root group=root mode=0644

- name: generate ssh key for root
  command: ssh-keygen -b 4096 -N "" -f /root/.ssh/id_rsa creates="/root/.ssh/id_rsa"

- name: create zsh directory
  file: path=/root/.zsh state=directory owner=root group=root mode=0700

- name: install root shell config
  copy: src={{ item }} dest=/root/.{{ item }} owner=root group=root mode=0644
  with_items:
    - zshrc
    - dircolors

- name: install systemd-swap
  pacman: name=systemd-swap state=present
  when: enable_zram_swap

- name: install systemd-swap config for zram
  copy: src=zram-swap.conf dest=/etc/systemd/swap.conf owner=root group=root mode=0644
  notify:
    - restart systemd-swap
  when: enable_zram_swap

- name: start systemd-swap
  service: name=systemd-swap state=started enabled=yes
  when: enable_zram_swap

- include: tools.yml
  tags: ['tools']

- include: logging.yml
  tags: ['logging']

- include: laptop.yml
  tags: ['laptop']
  when: laptop is defined
